on:
  push:
    tags:
      - 'v*'

name: Create Release

jobs:
  create_release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
  build:
    name: Upload Release
    needs: create_release
    strategy:
      matrix:
        arch: [x86_64, aarch64]
    runs-on: ${{ fromJson('{"x86_64":"ubuntu-latest", "aarch64":["self-hosted", "Linux", "ARM64"]}')[matrix.arch] }}
    container: docker.io/debian:buster-slim
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install curl
        run: |
          apt-get update -y
          apt-get install build-essential gcc curl git pkg-config -y
      
      - name: Install latest nightly
        uses: actions-rs/toolchain@v1

      - name: Build
        run: |
          cargo build --release --all
          cp target/$TARGET/release/nsexec ./nsexec
          cp target/$TARGET/release/libnsenter.so ./libnsenter.so
          tar -czvf ./nsexec-${{ matrix.target }}.tar.gz ./libnsenter.so ./nsexec

      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }} 
          asset_path: ./nsexec-${{ matrix.target }}.tar.gz
          asset_name: nsexec-${{ matrix.target }}.tar.gz
          asset_content_type: application/zip

